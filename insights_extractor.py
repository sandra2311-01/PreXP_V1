class InsightsExtractor:
    def __init__(self, profile, logger=None):
        """
        Initialize the InsightsExtractor with a profiling report and an optional logger.

        Parameters:
            profile (ProfileReport): The profiling report generated by ydata-profiling.
            logger (ReasoningLogger, optional): Logger instance for logging actions.
        """
        self.profile = profile
        self.logger = logger

    def log_message(self, column, details, metrics=None):
        """
        Log insights extraction messages.

        Parameters:
            column (str): The column related to the log (or None for general insights).
            details (str): The details of the insight.
            metrics (dict, optional): Additional metrics or data points related to the insight.
        """
        if self.logger:
            self.logger.log_insight(column=column, details=details, metrics=metrics)

    def extract_description(self):
        """
        Extract key insights and attributes from the profiling report.

        Returns:
            dict: A dictionary containing extracted insights.
        """
        if self.profile is None:
            self.log_message(None, "Profile report is not loaded or generated.")
            return None

        profile_description = self.profile.get_description()

        # Extract and log key attributes
        extracted_info = {}
        attributes_to_extract = [
            'alerts', 'analysis', 'correlations', 'duplicates', 'missing',
            'package', 'sample', 'scatter', 'table', 'time_index_analysis', 'variables'
        ]
        for attr in attributes_to_extract:
            try:
                extracted_info[attr] = getattr(profile_description, attr, None)
                self.log_message(
                    column=None,
                    details=f"Extracted {attr} successfully.",
                    metrics={f"{attr}_summary": str(extracted_info[attr])[:100]}  # Log a brief summary
                )
            except Exception as e:
                self.log_message(
                    column=None,
                    details=f"Failed to extract {attr}: {e}"
                )

        return extracted_info

    def inspect_description(self, filter_by=None):
        """
        Inspect the attributes available in the profile description.

        Parameters:
            filter_by (str, optional): A keyword to filter the attributes (e.g., 'analysis').

        Returns:
            list: List of available attributes in the profile description.
        """
        if self.profile is None:
            self.log_message(None, "Profile report is not loaded or generated.")
            return []

        profile_description = self.profile.get_description()
        available_attributes = dir(profile_description)

        if filter_by:
            available_attributes = [attr for attr in available_attributes if filter_by.lower() in attr.lower()]

        self.log_message(
            column=None,
            details=f"Available attributes in profile_description: {available_attributes}"
        )

        return available_attributes
